package com.marsanvi.crypto.services;import org.springframework.stereotype.Service;import com.marsanvi.crypto.exceptions.InvalidCipherException;@Servicepublic class SubstitutionService {	public String encode (String alphabet, String cipher, String text) throws InvalidCipherException {		if(alphabet.length()!=cipher.length()) {			throw new InvalidCipherException("Cipher has invalid length ");		}		StringBuilder encodedSb = new StringBuilder();		text = text.toLowerCase();		for (char i : text.toCharArray()) {			if (Character.isLetter(i))				encodedSb.append(cipher.charAt(alphabet.indexOf(i)));			else				encodedSb.append(i);		}		return encodedSb.toString();	}	public String decode(String alphabet, String cipher, String text) throws InvalidCipherException  {		return encode(cipher, alphabet, text);	}	public String generateRandomAlphabet(String defaultalphabet) {		int randomPosition1;		int randomPosition2;		char charPosition1;		char charPosition2;		StringBuilder randomAlphabetSb = new StringBuilder(defaultalphabet);		String randomAlphabet;		for (int i=0;i<defaultalphabet.length();i++) {			randomPosition1 = (int)(Math.random() * defaultalphabet.length());			randomPosition2 = (int)(Math.random() * defaultalphabet.length());			if(randomPosition1!=randomPosition2) {				charPosition1 = randomAlphabetSb.charAt(randomPosition1);		        charPosition2  = randomAlphabetSb.charAt(randomPosition2);		        randomAlphabetSb.setCharAt(randomPosition1, charPosition2);		        randomAlphabetSb.setCharAt(randomPosition2, charPosition1);			}		}		randomAlphabet = randomAlphabetSb.toString();		if(randomAlphabet.equals(defaultalphabet))			return generateRandomAlphabet(defaultalphabet);		else			return randomAlphabet;	}}